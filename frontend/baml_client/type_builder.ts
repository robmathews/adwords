/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    DemographicGenerationInput: ClassViewer<'DemographicGenerationInput', "productDescription" | "targetMarket">;
    
    Demographics: ClassViewer<'Demographics', "id" | "age" | "gender" | "interests" | "mosaicCategory" | "description">;
    
    LLMResponse: ClassViewer<'LLMResponse', "text" | "choice">;
    
    MosaicCategory: ClassViewer<'MosaicCategory', "id" | "name" | "description" | "traits">;
    
    Responses: ClassViewer<'Responses', "ignore" | "followLink" | "followAndBuy" | "followAndSave">;
    
    SimulationInput: ClassViewer<'SimulationInput', "demographic" | "productDescription" | "tagline">;
    
    SimulationResult: ClassViewer<'SimulationResult', "demographicId" | "responses" | "totalSims">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "DemographicGenerationInput","Demographics","LLMResponse","MosaicCategory","Responses","SimulationInput","SimulationResult",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.DemographicGenerationInput = this.tb.classViewer("DemographicGenerationInput", [
          "productDescription","targetMarket",
        ]);
        
        this.Demographics = this.tb.classViewer("Demographics", [
          "id","age","gender","interests","mosaicCategory","description",
        ]);
        
        this.LLMResponse = this.tb.classViewer("LLMResponse", [
          "text","choice",
        ]);
        
        this.MosaicCategory = this.tb.classViewer("MosaicCategory", [
          "id","name","description","traits",
        ]);
        
        this.Responses = this.tb.classViewer("Responses", [
          "ignore","followLink","followAndBuy","followAndSave",
        ]);
        
        this.SimulationInput = this.tb.classViewer("SimulationInput", [
          "demographic","productDescription","tagline",
        ]);
        
        this.SimulationResult = this.tb.classViewer("SimulationResult", [
          "demographicId","responses","totalSims",
        ]);
        
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}