/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "adwords.baml": "// adwords_models.baml\n// Define the core data types needed for the AdWords simulator\n\n// Demographics model that matches the Demographics type in your TypeScript\nclass Demographics {\n  id string\n  age string\n  gender string\n  interests string[]\n  mosaicCategory string\n  description string\n}\n\n// LLMResponse model that matches your TypeScript type\nclass LLMResponse {\n  text string\n  choice \"ignore\" | \"followLink\" | \"followAndBuy\" | \"followAndSave\"\n}\n\n// SimulationResult model that matches your TypeScript type \nclass SimulationResult {\n  demographicId string\n  responses Responses\n  totalSims int\n}\n\nclass Responses {\n  ignore int\n  followLink int\n  followAndBuy int\n  followAndSave int\n}\n\n// MosaicCategory model that matches your TypeScript interface\nclass MosaicCategory {\n  id string\n  name string\n  description string\n  traits string[]\n}\n\n// Input for demographic generation\nclass DemographicGenerationInput {\n  productDescription string\n  targetMarket string\n}\n\n// Input for simulation responses\nclass SimulationInput {\n  demographic Demographics\n  productDescription string\n  tagline string\n}\n\n// Generate Demographics function\nfunction GenerateDemographics(input: DemographicGenerationInput) -> Demographics[] {\n  client \"anthropic/claude-3-haiku\"\n  \n  prompt #\"\n  You are an expert in audience demographics and market segmentation. \n  \n  Your task is to generate 5 distinct and realistic demographic profiles for potential customers interested in the following product:\n  \n  Product Description: {{ input.productDescription }}\n  Target Market: {{ input.targetMarket }}\n  \n  Generate 5 diverse demographic profiles that represent different segments of the target market. For each profile, include:\n  - Age range (e.g., \"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\")\n  - Gender (e.g., \"Male\", \"Female\", \"Non-binary\", \"Other\")\n  - List of specific interests relevant to the product\n  - Mosaic Category (choose one from: \"Affluent Achievers\", \"Rising Prosperity\", \"Comfortable Communities\", \"Financially Stretched\", \"Urban Cohesion\", \"Suburban Mindsets\", \"Modest Traditions\", \"Not Private Households\")\n  - A concise description of this demographic segment (1-2 sentences)\n  \n  Each demographic profile should be realistic and representative of a segment that might engage with this product. Make sure the profiles are diverse and cover different age groups, genders, and interests.\n  \n  Generate the profiles in a JSON format that follows this exact structure:\n  [\n    {\n      \"id\": \"demo-1\",\n      \"age\": \"18-24\",\n      \"gender\": \"Male\",\n      \"interests\": [\"Interest 1\", \"Interest 2\", \"Interest 3\"],\n      \"mosaicCategory\": \"Rising Prosperity\",\n      \"description\": \"Description of this demographic.\"\n    },\n    // And so on for 5 total profiles\n  ]\n  \n  Do not include any explanatory text before or after the JSON. Just return the valid JSON array.\n  \"#\n}\n\n// Simulate Response function\nfunction SimulateResponse(input: SimulationInput) -> LLMResponse {\n  client \"anthropic/claude-3-sonnet\"\n  \n  prompt #\"\n  You will act as a specific demographic persona and evaluate your reaction to an advertisement.\n  \n  Your demographic persona is:\n  - Age: {{ input.demographic.age }}\n  - Gender: {{ input.demographic.gender }}\n  - Interests: {{ input.demographic.interests | join(\", \") }}\n  - Socioeconomic profile: {{ input.demographic.mosaicCategory }}\n  - Persona description: {{ input.demographic.description }}\n  \n  You are browsing online and see an advertisement for the following product:\n  \n  Product: {{ input.productDescription }}\n  Tagline: \"{{ input.tagline }}\"\n  \n  Based on your demographic persona, how would you most likely respond to this advertisement? Choose exactly one of these options:\n  1. \"ignore\" - You would scroll past or ignore the advertisement\n  2. \"followLink\" - You would click on the advertisement to learn more, but wouldn't make a purchase now\n  3. \"followAndBuy\" - You would click on the advertisement and likely make a purchase\n  4. \"followAndSave\" - You would click on the advertisement and save it for potential later purchase\n  \n  Provide your response in JSON format with two fields:\n  - \"choice\": One of the four options above (exactly as written)\n  - \"text\": A brief explanation (1-2 sentences) of your reasoning, written in first person from the perspective of this demographic\n  \n  Example format:\n  {\n    \"choice\": \"followAndBuy\",\n    \"text\": \"I've been looking for exactly this kind of product and the price point seems reasonable. I would definitely purchase this right away.\"\n  }\n  \n  Return only the JSON with no additional text.\n  \"#\n}\n\n// Generate Demographics Batch function\nfunction GenerateDemographicsBatch(input: DemographicGenerationInput) -> Demographics[] {\n  client \"anthropic/claude-3-haiku\"\n  \n  prompt #\"\n  You are an expert in audience demographics and market segmentation. \n  \n  Your task is to generate 5 distinct and realistic demographic profiles for potential customers interested in the following product:\n  \n  Product Description: {{ input.productDescription }}\n  Target Market: {{ input.targetMarket }}\n  \n  Generate 5 diverse demographic profiles that represent different segments of the target market. For each profile, include:\n  - Age range (e.g., \"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\")\n  - Gender (e.g., \"Male\", \"Female\", \"Non-binary\", \"Other\")\n  - List of specific interests relevant to the product\n  - Mosaic Category (choose one from: \"Affluent Achievers\", \"Rising Prosperity\", \"Comfortable Communities\", \"Financially Stretched\", \"Urban Cohesion\", \"Suburban Mindsets\", \"Modest Traditions\", \"Not Private Households\")\n  - A concise description of this demographic segment (1-2 sentences)\n  \n  Each demographic profile should be realistic and representative of a segment that might engage with this product. Make sure the profiles are diverse and cover different age groups, genders, and interests.\n  \n  Generate the profiles in a JSON format that follows this exact structure:\n  [\n    {\n      \"id\": \"demo-1\",\n      \"age\": \"18-24\",\n      \"gender\": \"Male\",\n      \"interests\": [\"Interest 1\", \"Interest 2\", \"Interest 3\"],\n      \"mosaicCategory\": \"Rising Prosperity\",\n      \"description\": \"Description of this demographic.\"\n    },\n    // And so on for 5 total profiles\n  ]\n  \n  Do not include any explanatory text before or after the JSON. Just return the valid JSON array.\n  \"#\n}",
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.88.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n\n",
}
export const getBamlFiles = () => {
    return fileMap;
}